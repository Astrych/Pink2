parameters:
  job1: ''
  job2: ''
  job3: ''
  job4: ''
  job5: ''
  job6: ''
  condition: ''

jobs:
- job: ${{ parameters.job1 }}
  pool:
    vmImage: 'Ubuntu 16.04'
  dependsOn: init_windows
  condition: ${{ parameters.condition }}
  steps:
  - checkout: none #skip checking out the default repository resource

  - template: install-setup.yml

  - bash: |
      mkdir -p $(windows.boost.prefix)
      wget https://sourceforge.net/projects/boost/files/boost/1.58.0/boost_1_58_0.tar.gz
      echo 'a004d9b3fa95e956383693b86fce1b68805a6f71c2e68944fa813de0fb8c8102  boost_1_58_0.tar.gz' | sha256sum -c
      tar xvzf boost_1_58_0.tar.gz
      cd boost_1_58_0
      echo "using gcc : : /usr/bin/x86_64-w64-mingw32-g++ : <cxxflags>\"-std=c++11 -fvisibility=hidden     -I$(windows.depsdir)/include    \"  <linkflags>\"-L$(windows.depsdir)/lib    \" <archiver>\"x86_64-w64-mingw32-ar\" <striper>\"x86_64-w64-mingw32-strip\"  <ranlib>\"x86_64-w64-mingw32-ranlib\" <rc>\"\" : ;" > user-config.jam
      ./bootstrap.sh --without-icu --with-libraries=chrono,filesystem,program_options,system,thread,test
      ./b2 -d2 -j2 -d1 --prefix=$(windows.boost.prefix) variant=release --layout=tagged \
      --build-type=complete --user-config=user-config.jam threading=multi link=static -sNO_BZIP2=1 \
      -sNO_ZLIB=1 binary-format=pe target-os=windows threadapi=win32 runtime-link=static address-model=64 stage
      ./b2 -d0 -j2 --prefix=$(windows.boost.prefix) variant=release --layout=tagged \
      --build-type=complete --user-config=user-config.jam threading=multi link=static \
      -sNO_BZIP2=1 -sNO_ZLIB=1 binary-format=pe target-os=windows threadapi=win32 \
      runtime-link=static address-model=64 install
    displayName: 'Build BOOST'

  - bash: |
      tar cvfz boost.tar.gz -C $(Build.BinariesDirectory)/$(windows.toolkit.name) .
      ls -la boost.tar.gz
    displayName: 'Pack BOOST'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish BOOST'
    inputs:
      pathtoPublish: '$(System.DefaultWorkingDirectory)/boost.tar.gz'
      artifactName: $(windows.toolkit.name)

# --------------------------------------------------------------------------------------------------

- job: ${{ parameters.job2 }}
  pool:
    vmImage: 'Ubuntu 16.04'
  dependsOn: init_windows
  condition: ${{ parameters.condition }}
  steps:
  - checkout: none #skip checking out the default repository resource

  - template: install-setup.yml

  - bash: |
      mkdir -p $(windows.miniupnpc.prefix)
      wget http://miniupnp.free.fr/files/download.php?file=miniupnpc-1.9.tar.gz -O miniupnpc-1.9.tar.gz
      echo '2923e453e880bb949e3d4da9f83dd3cb6f08946d35de0b864d0339cf70934464 miniupnpc-1.9.tar.gz' | sha256sum -c
      tar xzvf miniupnpc-1.9.tar.gz
      cd miniupnpc-1.9
      CC=x86_64-w64-mingw32-gcc \
      AR=x86_64-w64-mingw32-ar \
      CFLAGS="-DSTATICLIB -I$(windows.depsdir)/include" \
      LDFLAGS="-L$(windows.depsdir)/lib" \
      make -j2 libminiupnpc.a
      mkdir -p $(windows.miniupnpc.prefix)/include/miniupnpc
      mkdir -p $(windows.miniupnpc.prefix)/lib
      cp *.h $(windows.miniupnpc.prefix)/include/miniupnpc
      cp libminiupnpc.a $(windows.miniupnpc.prefix)/lib
    displayName: 'Build MiniUPNPC'

  - bash: |
      tar cvfz miniupnpc.tar.gz -C $(Build.BinariesDirectory)/$(windows.toolkit.name) .
      ls -la miniupnpc.tar.gz
    displayName: 'Pack MiniUPNPC'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish MiniUPNPC'
    inputs:
      pathtoPublish: '$(System.DefaultWorkingDirectory)/miniupnpc.tar.gz'
      artifactName: $(windows.toolkit.name)

# --------------------------------------------------------------------------------------------------

- job: ${{ parameters.job3 }}
  pool:
    vmImage: 'Ubuntu 16.04'
  dependsOn: init_windows
  condition: ${{ parameters.condition }}
  steps:
  - checkout: none #skip checking out the default repository resource

  - template: install-setup.yml

  - bash: |
      mkdir -p $(windows.bdb.prefix)
      wget 'http://download.oracle.com/berkeley-db/db-4.8.30.NC.tar.gz'
      echo '12edc0df75bf9abd7f82f821795bcee50f42cb2e5f76a6a281b85732798364ef db-4.8.30.NC.tar.gz' | sha256sum -c
      tar -xzvf db-4.8.30.NC.tar.gz
      cd db-4.8.30.NC/build_unix
      CC=/usr/bin/x86_64-w64-mingw32-gcc CXX=/usr/bin/x86_64-w64-mingw32-g++ \
      ../dist/configure --host=x86_64-w64-mingw32 \
      --enable-cxx --enable-mingw --disable-replication --disable-shared --prefix=$(windows.bdb.prefix)
      make -j2
      make -j2 install
    displayName: 'Build BDB4.8'

  - bash: |
      tar cvfz db4.tar.gz -C $(Build.BinariesDirectory)/$(windows.toolkit.name) .
      ls -la db4.tar.gz
    displayName: 'Pack BDB4.8'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish BDB4.8'
    inputs:
      pathtoPublish: '$(System.DefaultWorkingDirectory)/db4.tar.gz'
      artifactName: $(windows.toolkit.name)

# --------------------------------------------------------------------------------------------------

- job: ${{ parameters.job4 }}
  pool:
    vmImage: 'Ubuntu 16.04'
  dependsOn: init_windows
  condition: ${{ parameters.condition }}
  steps:
  - checkout: none #skip checking out the default repository resource

  - template: install-setup.yml

  - bash: |
      mkdir -p $(windows.zlib.prefix)
      wget http://www.zlib.net/zlib-1.2.11.tar.gz
      echo 'c3e5e9fdd5004dcb542feda5ee4f0ff0744628baf8ed2dd5d66f8ca1197cb1a1 zlib-1.2.11.tar.gz' | sha256sum -c
      tar xvzf zlib-1.2.11.tar.gz
      cd zlib-1.2.11
      ./configure --static --prefix=$(windows.zlib.prefix)
      make -j2 CC=x86_64-w64-mingw32-gcc AR=x86_64-w64-mingw32-ar \
      CFLAGS="-DSTATICLIB -I$(windows.depsdir)/include" LDFLAGS="-L$(windows.depsdir)/lib" libz.a
      make -j2 install CC=x86_64-w64-mingw32-gcc AR=x86_64-w64-mingw32-ar \
      CFLAGS="-DSTATICLIB -I$(windows.depsdir)/include" LDFLAGS="-L$(windows.depsdir)/lib"
    displayName: 'Build Zlib'

  - bash: |
      mkdir -p $(windows.libpng.prefix)
      wget http://download.sourceforge.net/libpng/libpng-1.6.16.tar.gz
      echo '02f96b6bad5a381d36d7ba7a5d9be3b06f7fe6c274da00707509c23592a073ad  libpng-1.6.16.tar.gz' | sha256sum -c
      tar xzvf libpng-1.6.16.tar.gz
      cd libpng-1.6.16
      CC=x86_64-w64-mingw32-gcc AR=x86_64-w64-mingw32-ar \
      CFLAGS="-DSTATICLIB -I$(windows.depsdir)/include" \
      CPPFLAGS="-I$(windows.zlib.prefix)/include" \
      LDFLAGS="-L$(windows.depsdir)/lib -L$(windows.zlib.prefix)/lib" \
      ./configure --host=x86_64-w64-mingw32 --prefix=$(windows.libpng.prefix) --disable-shared \
      --with-zlib-prefix=$(windows.zlib.prefix)
      make -j2
      make -j2 install
    displayName: 'Build LibPNG'

  - bash: |
      mkdir -p $(windows.qrencode.prefix)
      wget 'https://fukuchi.org/works/qrencode/qrencode-3.4.4.tar.gz'
      echo 'e794e26a96019013c0e3665cb06b18992668f352c5553d0a553f5d144f7f2a72 qrencode-3.4.4.tar.gz' | sha256sum -c
      tar -xzvf qrencode-3.4.4.tar.gz
      cd qrencode-3.4.4
      CC=x86_64-w64-mingw32-gcc \
      AR=x86_64-w64-mingw32-ar \
      CFLAGS="-DSTATICLIB -I$(windows.depsdir)/include" \
      LDFLAGS="-L$(windows.depsdir)/lib" \
      png_CFLAGS="-I$(windows.libpng.prefix)/include" \
      png_LIBS="-I$(windows.libpng.prefix)/include" \
      ./configure --host=x86_64-w64-mingw32 --disable-shared --enable-static --without-tools --prefix=$(windows.qrencode.prefix)
      make -j2
      make -j2 install
    displayName: 'Build QREncode'

  - bash: |
      tar cvfz zlib.tar.gz -C $(Build.BinariesDirectory)/$(windows.toolkit.name) zlib
      ls -la zlib.tar.gz
    displayName: 'Pack Zlib'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Zlib'
    inputs:
      pathtoPublish: '$(System.DefaultWorkingDirectory)/zlib.tar.gz'
      artifactName: $(windows.toolkit.name)

  - bash: |
      tar cvfz libpng.tar.gz -C $(Build.BinariesDirectory)/$(windows.toolkit.name) libpng
      ls -la libpng.tar.gz
    displayName: 'Pack LibPNG'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish LibPNG'
    inputs:
      pathtoPublish: '$(System.DefaultWorkingDirectory)/libpng.tar.gz'
      artifactName: $(windows.toolkit.name)

  - bash: |
      tar cvfz qrencode.tar.gz -C $(Build.BinariesDirectory)/$(windows.toolkit.name) qrencode
      ls -la qrencode.tar.gz
    displayName: 'Pack QREncode'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish QREncode'
    inputs:
      pathtoPublish: '$(System.DefaultWorkingDirectory)/qrencode.tar.gz'
      artifactName: $(windows.toolkit.name)

# --------------------------------------------------------------------------------------------------

- job: ${{ parameters.job5 }}
  pool:
    vmImage: 'Ubuntu 16.04'
  dependsOn: init_windows
  condition: ${{ parameters.condition }}
  steps:
  - checkout: none #skip checking out the default repository resource

  - template: install-setup.yml

  - bash: |
      mkdir -p $(windows.openssl.prefix)
      wget 'https://www.openssl.org/source/openssl-1.0.2o.tar.gz'
      echo 'ec3f5c9714ba0fd45cb4e087301eb1336c317e0d20b575a125050470e8089e4d openssl-1.0.2o.tar.gz' | sha256sum -c
      tar -xzvf openssl-1.0.2o.tar.gz
      cd openssl-1.0.2o
      CFLAGS="-DSTATICLIB -I$(windows.depsdir)/include" \
      LDFLAGS="-L$(windows.depsdir)/lib" \
      ./Configure --cross-compile-prefix=x86_64-w64-mingw32- --prefix=$(windows.openssl.prefix) no-camellia \
      no-capieng no-cast no-comp no-dso no-dtls1 no-ec_nistp_64_gcc_128 no-gost no-gmp \
      no-heartbeats no-idea no-jpake no-krb5 no-libunbound no-md2 no-mdc2 no-rc4 no-rc5 no-rdrand \
      no-rfc3779 no-rsax no-sctp no-sctp no-seed no-sha0 no-shared no-ssl-trace no-ssl2 \
      no-ssl3 no-static_engine no-store no-unit-test no-weak-ssl-ciphers no-whirlpool no-zlib \
      no-zlib-dynamic mingw64
      make depend
      make -j2
      make -j2 install_sw
    displayName: 'Build OpenSSL'

  - bash: |
      tar cvfz openssl.tar.gz -C $(Build.BinariesDirectory)/$(windows.toolkit.name) .
      ls -la openssl.tar.gz
    displayName: 'Pack OpenSSL'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish OpenSSL'
    inputs:
      pathtoPublish: '$(System.DefaultWorkingDirectory)/openssl.tar.gz'
      artifactName: $(windows.toolkit.name)

# --------------------------------------------------------------------------------------------------

- job: ${{ parameters.job6 }}
  pool:
    vmImage: 'Ubuntu 16.04'
  dependsOn:
    - init_windows
    - ${{ parameters.job4 }}
    - ${{ parameters.job5 }}
  condition: ${{ parameters.condition }}
  steps:
  - template: install-setup.yml

  - task: DownloadBuildArtifacts@0
    inputs:
      artifactName: $(windows.toolkit.name)
      downloadPath: $(Build.BinariesDirectory)

  - bash: |
      cd $(Build.BinariesDirectory)/$(windows.toolkit.name)
      ls *.tar.gz | xargs -i tar xvf {}
      sudo cp -r zlib/* $(windows.depsdir)
      sudo cp -r openssl/* $(windows.depsdir)
    displayName: 'Unpack Deps'

  - bash: |
      mkdir -p $(windows.qt.prefix)
      wget 'https://download.qt.io/official_releases/qt/5.9/5.9.7/submodules/qtbase-opensource-src-5.9.7.tar.xz'
      wget 'https://download.qt.io/official_releases/qt/5.9/5.9.7/submodules/qttools-opensource-src-5.9.7.tar.xz'
      wget 'https://download.qt.io/official_releases/qt/5.9/5.9.7/submodules/qttranslations-opensource-src-5.9.7.tar.xz'
      echo '36dd9574f006eaa1e5af780e4b33d11fe39d09fd7c12f3b9d83294174bd28f00 qtbase-opensource-src-5.9.7.tar.xz' | sha256sum -c
      echo 'd62e0f70d99645d6704dbb8976fb2222443061743689943d40970c52c49367a1 qttools-opensource-src-5.9.7.tar.xz' | sha256sum -c
      echo 'b36da7d93c3ab6fca56b32053bb73bc619c8b192bb89b74e3bcde2705f1c2a14 qttranslations-opensource-src-5.9.7.tar.xz' | sha256sum -c
      tar xf qtbase-opensource-src-5.9.7.tar.xz
      tar xf qttools-opensource-src-5.9.7.tar.xz
      tar xf qttranslations-opensource-src-5.9.7.tar.xz
      cd qtbase-opensource-src-5.9.7/
      ./configure -prefix $(windows.qt.prefix) -xplatform win32-g++ \
      -device-option CROSS_COMPILE=x86_64-w64-mingw32- \
      -release -c++std c++11 -confirm-license -opensource \
      -nomake examples -nomake tests -make libs -dbus-runtime \
      -no-alsa -no-audio-backend -no-cups -no-egl -no-eglfs \
      -no-feature-style-windowsmobile -no-feature-style-windowsce \
      -no-freetype -no-gif -no-glib -no-gstreamer -no-icu -no-iconv \
      -no-kms -no-linuxfb -no-libudev -no-mitshm -no-mtdev \
      -no-pulseaudio -no-openvg -no-reduce-relocations -no-qml-debug \
      -no-sql-db2 -no-sql-ibase -no-sql-oci -no-sql-tds \
      -no-sql-mysql -no-sql-odbc -no-sql-psql -no-sql-sqlite \
      -no-sql-sqlite2 -no-use-gold-linker -no-xinput2 -no-xrender \
      -no-feature-printer -no-feature-printdialog -no-opengl \
      -openssl-linked -optimized-qmake -pch -pkg-config -qt-libpng \
      -qt-pcre -system-zlib -reduce-exports -static -silent -v
      echo "host_build: QT_CONFIG ~= s/system-zlib/zlib" >> mkspecs/qconfig.pri && \
      echo "CONFIG += force_bootstrap" >> mkspecs/qconfig.pri && \
      make -j2 sub-src-clean
      cd ../qttranslations-opensource-src-5.9.7 && ../qtbase-opensource-src-5.9.7/bin/qmake qttranslations.pro -o Makefile && \
      cd translations && ../../qtbase-opensource-src-5.9.7/bin/qmake translations.pro -o Makefile && cd ../.. &&\
      cd qttools-opensource-src-5.9.7/src/linguist/lrelease/ && ../../../../qtbase-opensource-src-5.9.7/bin/qmake lrelease.pro -o Makefile
      cd ../../../../qtbase-opensource-src-5.9.7/
      make -j2 -C src sub-corelib sub-network sub-widgets sub-gui sub-winmain sub-plugins sub-testlib
      make -j2 -C ../qttools-opensource-src-5.9.7/src/linguist/lrelease
      sudo make -j2 -C ../qttools-opensource-src-5.9.7/src/linguist/lrelease install_target
      sudo make -j2 -C ../qttranslations-opensource-src-5.9.7
      sudo make -j2 -C src sub-corelib-install_subtargets sub-network-install_subtargets sub-winmain-install_subtargets \
      sub-widgets-install_subtargets sub-gui-install_subtargets sub-plugins-install_subtargets sub-testlib-install_subtargets
      sudo make -j2 -C ../qttranslations-opensource-src-5.9.7 install_subtargets
      sudo make -j2 install
    displayName: 'Build Qt'

  - bash: |
      sudo python3 .azure/windows/fix_prl.py $(windows.qt.prefix) \
      lib plugins/bearer plugins/generic plugins/imageformats plugins/platforms
    displayName: 'Fix prls'

  - bash: |
      tar cvfz qt.tar.gz $(windows.depsdir)
      ls -la qt.tar.gz
    displayName: 'Pack Qt'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Qt'
    inputs:
      pathtoPublish: '$(System.DefaultWorkingDirectory)/qt.tar.gz'
      artifactName: $(windows.toolkit.name)
