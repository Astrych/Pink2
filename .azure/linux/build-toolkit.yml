parameters:
  job1: ''
  job2: ''
  job3: ''
  condition: ''

jobs:
- job: ${{ parameters.job1 }}
  pool:
    vmImage: 'Ubuntu 16.04'
    cancelTimeoutInMinutes: 1
  dependsOn: init_linux
  condition: ${{ parameters.condition }}
  steps:
  - checkout: none #skip checking out the default repository resource

  - bash: |
      mkdir -p $(linux.bdb.prefix)
      wget 'http://download.oracle.com/berkeley-db/db-4.8.30.NC.tar.gz'
      echo '12edc0df75bf9abd7f82f821795bcee50f42cb2e5f76a6a281b85732798364ef db-4.8.30.NC.tar.gz' | sha256sum -c
      tar -xzvf db-4.8.30.NC.tar.gz
      cd db-4.8.30.NC/build_unix
      ../dist/configure --enable-cxx --disable-shared --with-pic --prefix=$(linux.bdb.prefix)
      make -j2
      make -j2 install
    displayName: 'Build BDB4.8'

  - bash: |
      tar cvfz db4.tar.gz -C $(Build.BinariesDirectory)/$(linux.toolkit.name) .
      ls -la db4.tar.gz
    displayName: 'Pack BDB4.8'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish BDB4.8'
    inputs:
      pathtoPublish: '$(System.DefaultWorkingDirectory)/db4.tar.gz'
      artifactName: $(linux.toolkit.name)

# --------------------------------------------------------------------------------------------------

- job: ${{ parameters.job2 }}
  pool:
    vmImage: 'Ubuntu 16.04'
    cancelTimeoutInMinutes: 1
  dependsOn: init_linux
  condition: ${{ parameters.condition }}
  steps:
  - checkout: none #skip checking out the default repository resource

  - bash: |
      mkdir -p $(linux.qrencode.prefix)
      wget 'https://fukuchi.org/works/qrencode/qrencode-3.4.4.tar.gz'
      echo 'e794e26a96019013c0e3665cb06b18992668f352c5553d0a553f5d144f7f2a72 qrencode-3.4.4.tar.gz' | sha256sum -c
      tar -xzvf qrencode-3.4.4.tar.gz
      cd qrencode-3.4.4
      ./configure --disable-shared --enable-static --without-tools --prefix=$(linux.qrencode.prefix)
      make -j2
      make -j2 install
    displayName: 'Build QREncode'

  - bash: |
      tar cvfz qrencode.tar.gz -C $(Build.BinariesDirectory)/$(linux.toolkit.name) .
      ls -la qrencode.tar.gz
    displayName: 'Pack QREncode'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish QREncode'
    inputs:
      pathtoPublish: '$(System.DefaultWorkingDirectory)/qrencode.tar.gz'
      artifactName: $(linux.toolkit.name)

# --------------------------------------------------------------------------------------------------

- job: ${{ parameters.job3 }}
  pool:
    vmImage: 'Ubuntu 16.04'
    cancelTimeoutInMinutes: 1
  dependsOn: init_linux
  condition: ${{ parameters.condition }}
  variables:
    openssl.prefix: ${{ parameters.openssl.prefix }}
  steps:
  - checkout: none #skip checking out the default repository resource

  - bash: |
      mkdir -p $(linux.openssl.prefix)
      wget 'https://www.openssl.org/source/openssl-1.0.2n.tar.gz'
      echo '370babb75f278c39e0c50e8c4e7493bc0f18db6867478341a832a982fd15a8fe openssl-1.0.2n.tar.gz' | sha256sum -c
      tar -xzvf openssl-1.0.2n.tar.gz
      cd openssl-1.0.2n
      ./Configure linux-x86_64 no-ssl2 no-ssl3 no-comp --prefix=$(linux.openssl.prefix) no-shared
      make depend
      make -j2
      make -j2 install
    displayName: 'Build OpenSSL'

  - bash: |
      tar cvfz openssl.tar.gz -C $(Build.BinariesDirectory)/$(linux.toolkit.name) .
      ls -la openssl.tar.gz
    displayName: 'Pack OpenSSL'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish OpenSSL'
    inputs:
      pathtoPublish: '$(System.DefaultWorkingDirectory)/openssl.tar.gz'
      artifactName: $(linux.toolkit.name)
